{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7268134,"sourceType":"datasetVersion","datasetId":4213109}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/tiheli/scaler-normalization?scriptVersionId=206556028\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-11T14:29:04.124072Z","iopub.execute_input":"2024-11-11T14:29:04.125206Z","iopub.status.idle":"2024-11-11T14:29:04.146284Z","shell.execute_reply.started":"2024-11-11T14:29:04.125149Z","shell.execute_reply":"2024-11-11T14:29:04.1451Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"/kaggle/input/plane-price-prediction/Plane Price.csv\n","output_type":"stream"}]},{"cell_type":"code","source":" # Load the dataset containing plane prices and related features\ndf=pd.read_csv('/kaggle/input/plane-price-prediction/Plane Price.csv')","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:04.288123Z","iopub.execute_input":"2024-11-11T14:29:04.288592Z","iopub.status.idle":"2024-11-11T14:29:04.300622Z","shell.execute_reply.started":"2024-11-11T14:29:04.288548Z","shell.execute_reply":"2024-11-11T14:29:04.299138Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# Import StandardScaler and MinMaxScaler for scaling and normalizing the data\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:04.45909Z","iopub.execute_input":"2024-11-11T14:29:04.460117Z","iopub.status.idle":"2024-11-11T14:29:04.465142Z","shell.execute_reply.started":"2024-11-11T14:29:04.460066Z","shell.execute_reply":"2024-11-11T14:29:04.463886Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# Display the first 5 rows of the dataframe to examine the structure and values of the dataset\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:04.623606Z","iopub.execute_input":"2024-11-11T14:29:04.624109Z","iopub.status.idle":"2024-11-11T14:29:04.649691Z","shell.execute_reply.started":"2024-11-11T14:29:04.624065Z","shell.execute_reply":"2024-11-11T14:29:04.648463Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"                     Model Name Engine Type HP or lbs thr ea engine  \\\n0  100 Darter (S.L. Industries)      Piston                     145   \n1                   7 CCM Champ      Piston                      85   \n2  100 Darter (S.L. Industries)      Piston                      90   \n3                    7 AC Champ      Piston                      85   \n4  100 Darter (S.L. Industries)      Piston                      65   \n\n  Max speed Knots  Rcmnd cruise Knots  Stall Knots dirty  Fuel gal/lbs  \\\n0             104                91.0               46.0            36   \n1              89                83.0               44.0            15   \n2              90                78.0               37.0            19   \n3              88                78.0               37.0            19   \n4              83                74.0               33.0            14   \n\n  All eng rate of climb  Eng out rate of climb  Takeoff over 50ft  \\\n0                   450                  900.0             1300.0   \n1                   600                  720.0              800.0   \n2                   650                  475.0              850.0   \n3                   620                  500.0              850.0   \n4                   370                  632.0              885.0   \n\n  Landing over 50ft Empty weight lbs Length ft/in Wing span ft/in Range N.M.  \\\n0             2,050            1,180         25/3            37/5        370   \n1             1,350              820         20/7            36/1        190   \n2             1,300              810         21/5            35/0        210   \n3             1,300              800         21/5            35/0        210   \n4             1,220              740         21/5            35/0        175   \n\n       Price  \n0  1300000.0  \n1  1230000.0  \n2  1600000.0  \n3  1300000.0  \n4  1250000.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model Name</th>\n      <th>Engine Type</th>\n      <th>HP or lbs thr ea engine</th>\n      <th>Max speed Knots</th>\n      <th>Rcmnd cruise Knots</th>\n      <th>Stall Knots dirty</th>\n      <th>Fuel gal/lbs</th>\n      <th>All eng rate of climb</th>\n      <th>Eng out rate of climb</th>\n      <th>Takeoff over 50ft</th>\n      <th>Landing over 50ft</th>\n      <th>Empty weight lbs</th>\n      <th>Length ft/in</th>\n      <th>Wing span ft/in</th>\n      <th>Range N.M.</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>100 Darter (S.L. Industries)</td>\n      <td>Piston</td>\n      <td>145</td>\n      <td>104</td>\n      <td>91.0</td>\n      <td>46.0</td>\n      <td>36</td>\n      <td>450</td>\n      <td>900.0</td>\n      <td>1300.0</td>\n      <td>2,050</td>\n      <td>1,180</td>\n      <td>25/3</td>\n      <td>37/5</td>\n      <td>370</td>\n      <td>1300000.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7 CCM Champ</td>\n      <td>Piston</td>\n      <td>85</td>\n      <td>89</td>\n      <td>83.0</td>\n      <td>44.0</td>\n      <td>15</td>\n      <td>600</td>\n      <td>720.0</td>\n      <td>800.0</td>\n      <td>1,350</td>\n      <td>820</td>\n      <td>20/7</td>\n      <td>36/1</td>\n      <td>190</td>\n      <td>1230000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>100 Darter (S.L. Industries)</td>\n      <td>Piston</td>\n      <td>90</td>\n      <td>90</td>\n      <td>78.0</td>\n      <td>37.0</td>\n      <td>19</td>\n      <td>650</td>\n      <td>475.0</td>\n      <td>850.0</td>\n      <td>1,300</td>\n      <td>810</td>\n      <td>21/5</td>\n      <td>35/0</td>\n      <td>210</td>\n      <td>1600000.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7 AC Champ</td>\n      <td>Piston</td>\n      <td>85</td>\n      <td>88</td>\n      <td>78.0</td>\n      <td>37.0</td>\n      <td>19</td>\n      <td>620</td>\n      <td>500.0</td>\n      <td>850.0</td>\n      <td>1,300</td>\n      <td>800</td>\n      <td>21/5</td>\n      <td>35/0</td>\n      <td>210</td>\n      <td>1300000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>100 Darter (S.L. Industries)</td>\n      <td>Piston</td>\n      <td>65</td>\n      <td>83</td>\n      <td>74.0</td>\n      <td>33.0</td>\n      <td>14</td>\n      <td>370</td>\n      <td>632.0</td>\n      <td>885.0</td>\n      <td>1,220</td>\n      <td>740</td>\n      <td>21/5</td>\n      <td>35/0</td>\n      <td>175</td>\n      <td>1250000.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Display information about the dataframe, such as the number of non-null entries, column types, and memory usage\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:04.805345Z","iopub.execute_input":"2024-11-11T14:29:04.805817Z","iopub.status.idle":"2024-11-11T14:29:04.820531Z","shell.execute_reply.started":"2024-11-11T14:29:04.805772Z","shell.execute_reply":"2024-11-11T14:29:04.819298Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 517 entries, 0 to 516\nData columns (total 16 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   Model Name               517 non-null    object \n 1   Engine Type              517 non-null    object \n 2   HP or lbs thr ea engine  517 non-null    object \n 3   Max speed Knots          497 non-null    object \n 4   Rcmnd cruise Knots       507 non-null    float64\n 5   Stall Knots dirty        502 non-null    float64\n 6   Fuel gal/lbs             517 non-null    int64  \n 7   All eng rate of climb    513 non-null    object \n 8   Eng out rate of climb    491 non-null    float64\n 9   Takeoff over 50ft        492 non-null    float64\n 10  Landing over 50ft        517 non-null    object \n 11  Empty weight lbs         516 non-null    object \n 12  Length ft/in             517 non-null    object \n 13  Wing span ft/in          517 non-null    object \n 14  Range N.M.               499 non-null    object \n 15  Price                    507 non-null    float64\ndtypes: float64(5), int64(1), object(10)\nmemory usage: 64.8+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"# Select relevant columns for analysis and drop any rows with missing values\ndf = df[[\"Rcmnd cruise Knots\", \"Stall Knots dirty\", \"Fuel gal/lbs\", \"Eng out rate of climb\", \"Takeoff over 50ft\", \"Price\"]]\n# Drop rows with any missing values\ndf = df.dropna()  ","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:05.19809Z","iopub.execute_input":"2024-11-11T14:29:05.199045Z","iopub.status.idle":"2024-11-11T14:29:05.208629Z","shell.execute_reply.started":"2024-11-11T14:29:05.198977Z","shell.execute_reply":"2024-11-11T14:29:05.207214Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"# Display the first 5 rows of the dataframe to examine the structure and values of the dataset\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:05.547307Z","iopub.execute_input":"2024-11-11T14:29:05.547773Z","iopub.status.idle":"2024-11-11T14:29:05.566298Z","shell.execute_reply.started":"2024-11-11T14:29:05.547728Z","shell.execute_reply":"2024-11-11T14:29:05.565019Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"   Rcmnd cruise Knots  Stall Knots dirty  Fuel gal/lbs  Eng out rate of climb  \\\n0                91.0               46.0            36                  900.0   \n1                83.0               44.0            15                  720.0   \n2                78.0               37.0            19                  475.0   \n3                78.0               37.0            19                  500.0   \n4                74.0               33.0            14                  632.0   \n\n   Takeoff over 50ft      Price  \n0             1300.0  1300000.0  \n1              800.0  1230000.0  \n2              850.0  1600000.0  \n3              850.0  1300000.0  \n4              885.0  1250000.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rcmnd cruise Knots</th>\n      <th>Stall Knots dirty</th>\n      <th>Fuel gal/lbs</th>\n      <th>Eng out rate of climb</th>\n      <th>Takeoff over 50ft</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>91.0</td>\n      <td>46.0</td>\n      <td>36</td>\n      <td>900.0</td>\n      <td>1300.0</td>\n      <td>1300000.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>83.0</td>\n      <td>44.0</td>\n      <td>15</td>\n      <td>720.0</td>\n      <td>800.0</td>\n      <td>1230000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>78.0</td>\n      <td>37.0</td>\n      <td>19</td>\n      <td>475.0</td>\n      <td>850.0</td>\n      <td>1600000.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>78.0</td>\n      <td>37.0</td>\n      <td>19</td>\n      <td>500.0</td>\n      <td>850.0</td>\n      <td>1300000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>74.0</td>\n      <td>33.0</td>\n      <td>14</td>\n      <td>632.0</td>\n      <td>885.0</td>\n      <td>1250000.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Separate target variable (Price) from the features\ny = df['Price']  # Target variable: Price column\nx = df.drop(\"Price\", axis=1)  # Features: All columns except Price","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:05.887304Z","iopub.execute_input":"2024-11-11T14:29:05.888374Z","iopub.status.idle":"2024-11-11T14:29:05.895677Z","shell.execute_reply.started":"2024-11-11T14:29:05.888317Z","shell.execute_reply":"2024-11-11T14:29:05.894224Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":"# we do not make normalization for Y","metadata":{}},{"cell_type":"code","source":"# Standardize the feature data\nss = StandardScaler()  # Initialize the StandardScaler\nx2 = ss.fit_transform(x)  # Fit and transform the feature data using StandardScaler","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:06.582395Z","iopub.execute_input":"2024-11-11T14:29:06.582877Z","iopub.status.idle":"2024-11-11T14:29:06.593788Z","shell.execute_reply.started":"2024-11-11T14:29:06.582814Z","shell.execute_reply":"2024-11-11T14:29:06.592433Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"# Convert the standardized data into a DataFrame\nx2 = pd.DataFrame(x2)  # Convert the scaled feature data back into a DataFrame\nx2.head(3)  # Display the first 3 rows of the standardized data","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:06.935205Z","iopub.execute_input":"2024-11-11T14:29:06.935681Z","iopub.status.idle":"2024-11-11T14:29:06.950972Z","shell.execute_reply.started":"2024-11-11T14:29:06.935614Z","shell.execute_reply":"2024-11-11T14:29:06.949635Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"          0         1         2         3         4\n0 -1.068639 -0.909101 -0.301174 -1.010356 -0.570019\n1 -1.148840 -1.032013 -0.306563 -1.176676 -1.280965\n2 -1.198965 -1.462203 -0.305537 -1.403055 -1.209871","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-1.068639</td>\n      <td>-0.909101</td>\n      <td>-0.301174</td>\n      <td>-1.010356</td>\n      <td>-0.570019</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-1.148840</td>\n      <td>-1.032013</td>\n      <td>-0.306563</td>\n      <td>-1.176676</td>\n      <td>-1.280965</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-1.198965</td>\n      <td>-1.462203</td>\n      <td>-0.305537</td>\n      <td>-1.403055</td>\n      <td>-1.209871</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Calculate the mean of the 4th column of the standardized data\nx2[4].mean()  # This gives the mean value of the 4th column in the standardized DataFrame","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:07.744329Z","iopub.execute_input":"2024-11-11T14:29:07.744777Z","iopub.status.idle":"2024-11-11T14:29:07.753574Z","shell.execute_reply.started":"2024-11-11T14:29:07.744734Z","shell.execute_reply":"2024-11-11T14:29:07.752144Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"-4.674623261579606e-17"},"metadata":{}}]},{"cell_type":"code","source":"# Calculate the standard deviation of the 4th column of the standardized data\nx2[4].std()  # This gives the standard deviation of the 4th column in the standardized DataFrame","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:08.313682Z","iopub.execute_input":"2024-11-11T14:29:08.314511Z","iopub.status.idle":"2024-11-11T14:29:08.322486Z","shell.execute_reply.started":"2024-11-11T14:29:08.314462Z","shell.execute_reply":"2024-11-11T14:29:08.321333Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"1.001098297969686"},"metadata":{}}]},{"cell_type":"code","source":"# Initialize the MinMaxScaler to scale features to a range between 0 and 1\nmm = MinMaxScaler()  # This creates an instance of MinMaxScaler","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:08.727552Z","iopub.execute_input":"2024-11-11T14:29:08.727993Z","iopub.status.idle":"2024-11-11T14:29:08.733777Z","shell.execute_reply.started":"2024-11-11T14:29:08.727952Z","shell.execute_reply":"2024-11-11T14:29:08.732321Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"# Apply MinMaxScaler to the feature set (x) to scale all features to the range [0, 1]\nx3 = mm.fit_transform(x)  # This scales all the features of x using the MinMaxScaler","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:09.540737Z","iopub.execute_input":"2024-11-11T14:29:09.541202Z","iopub.status.idle":"2024-11-11T14:29:09.551306Z","shell.execute_reply.started":"2024-11-11T14:29:09.541157Z","shell.execute_reply":"2024-11-11T14:29:09.550061Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"# Convert the scaled data (x3) into a DataFrame and display the first 3 rows\nx3 = pd.DataFrame(x3)  # Convert the scaled array back into a DataFrame\nx3.head(3)  # Display the first 3 rows of the scaled data","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:10.166337Z","iopub.execute_input":"2024-11-11T14:29:10.166799Z","iopub.status.idle":"2024-11-11T14:29:10.181669Z","shell.execute_reply.started":"2024-11-11T14:29:10.166755Z","shell.execute_reply":"2024-11-11T14:29:10.180005Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"          0         1         2         3         4\n0  0.051724  0.215909  0.000814  0.074541  0.183908\n1  0.032020  0.193182  0.000102  0.044254  0.068966\n2  0.019704  0.113636  0.000237  0.003029  0.080460","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.051724</td>\n      <td>0.215909</td>\n      <td>0.000814</td>\n      <td>0.074541</td>\n      <td>0.183908</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.032020</td>\n      <td>0.193182</td>\n      <td>0.000102</td>\n      <td>0.044254</td>\n      <td>0.068966</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.019704</td>\n      <td>0.113636</td>\n      <td>0.000237</td>\n      <td>0.003029</td>\n      <td>0.080460</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Calculate the mean of the first feature after MinMax scaling\nx3[0].mean()  # This returns the mean of the first column in the scaled data","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:10.516418Z","iopub.execute_input":"2024-11-11T14:29:10.517326Z","iopub.status.idle":"2024-11-11T14:29:10.525631Z","shell.execute_reply.started":"2024-11-11T14:29:10.517273Z","shell.execute_reply":"2024-11-11T14:29:10.52429Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"0.3142770719903207"},"metadata":{}}]},{"cell_type":"code","source":"# Calculate the standard deviation of the first feature after MinMax scaling\nx3[0].std()  # This returns the standard deviation of the first column in the scaled data","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:11.231334Z","iopub.execute_input":"2024-11-11T14:29:11.231876Z","iopub.status.idle":"2024-11-11T14:29:11.241154Z","shell.execute_reply.started":"2024-11-11T14:29:11.23182Z","shell.execute_reply":"2024-11-11T14:29:11.239825Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"0.24595887911039882"},"metadata":{}}]},{"cell_type":"code","source":"# Calculate the maximum value of the first feature after MinMax scaling\nx3[0].max()  # This returns the maximum value of the first column in the scaled data","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:11.744352Z","iopub.execute_input":"2024-11-11T14:29:11.74478Z","iopub.status.idle":"2024-11-11T14:29:11.75353Z","shell.execute_reply.started":"2024-11-11T14:29:11.74474Z","shell.execute_reply":"2024-11-11T14:29:11.752282Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"1.0"},"metadata":{}}]},{"cell_type":"code","source":"# Calculate the minimum value of the first feature after MinMax scaling\nx3[0].min()  # This returns the minimum value of the first column in the scaled data","metadata":{"execution":{"iopub.status.busy":"2024-11-11T14:29:12.712287Z","iopub.execute_input":"2024-11-11T14:29:12.712747Z","iopub.status.idle":"2024-11-11T14:29:12.721774Z","shell.execute_reply.started":"2024-11-11T14:29:12.712703Z","shell.execute_reply":"2024-11-11T14:29:12.719924Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"0.0"},"metadata":{}}]}]}